{"version":3,"sources":["components/Users/UserBox.js","components/Users/SingleUserRow.js","components/Users/UsersTable.js","containers/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["UserBox","props","className","count","SingleUser","useEffect","timeStampToTime","parseInt","user","lastLoginTime","ts","date","Date","hours","getHours","minutes","getMinutes","seconds","getSeconds","formattedTime","substr","firebaseId","name","mobileNo","gender","dateOfBirth","email","bio","qualifications","type","onClick","Axios","post","then","res","alert","data","catch","err","console","error","UsersTable","users","map","item","index","key","HomeContainer","state","usersCount","postsCount","posts","getAllUsers","get","log","setState","length","getAllPosts","this","Component","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.516738a7.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function UserBox(props) {\n    return <div className=\"card\">\n        <div className=\"card-body\">\n            {props.count + \" Users\"}\n            </div>\n    </div>;\n}","import Axios from 'axios';\nimport React, { useEffect } from 'react';\n\n\nexport default function SingleUser(props) {\n\n    useEffect(() => {\n        timeStampToTime(parseInt(props.user.lastLoginTime))\n      });\n\n    const timeStampToTime = (ts) => {\n        let unix_timestamp = ts\n        var date = new Date(unix_timestamp * 1000);\n        var hours = date.getHours();\n        var minutes = \"0\" + date.getMinutes();\n        var seconds = \"0\" + date.getSeconds();\n        var formattedTime = hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\n        props.user.ts = formattedTime\n    }\n\n    const deleteUser = () =>{\n        Axios.post(\"http://13.232.164.94:7001/studiendo/users/deleteUser/\"+props.user.firebaseId, {})\n        .then((res)=>{\n            alert(res.data.data);\n        }).catch((err)=>{\n            console.error(err)\n        })\n    }\n\n    const blockUser = () =>{\n        Axios.post(\"http://13.232.164.94:7001/studiendo/users/blockUser/\"+props.user.firebaseId, {})\n        .then((res)=>{\n            alert(res.data.data);\n        }).catch((err)=>{\n            console.error(err)\n        })\n    }\n\n    return (<tr>\n        <td>{props.user.firebaseId}</td>\n        <td>{props.user.name}</td>\n        <td>{props.user.mobileNo}</td>\n        <td>{props.user.gender}</td>\n        <td>{props.user.dateOfBirth}</td>\n        <td>{props.user.email}</td>\n        <td>{props.user.bio}</td>\n        <td>{props.user.qualifications}</td>\n        <td><button type=\"button\" className=\"btn btn-warning\" onClick={blockUser}>Block</button></td>\n        <td><button type=\"button\" className=\"btn btn-danger\" onClick={deleteUser}>Delete</button></td>\n\n\n    </tr>);\n}","import React from 'react';\nimport SingleUser from './SingleUserRow';\n\nexport default function UsersTable(props) {\n    return <div className=\"container\">\n                                                                                     \n    \n    <div className=\"table-responsive\">\n      <table className=\"table table-bordered\">\n        <thead>\n          <tr>\n            <th>#</th>\n            <th>Name</th>\n            <th>Mobile</th>\n            <th>Gender</th>\n            <th>DateOfBirth</th>\n            <th>Email</th>\n            <th>Bio</th>\n            <th>Qualifications</th>\n            <th>Block/Spam User</th>\n            <th>Delete User</th>\n\n          </tr>\n        </thead>\n        <tbody>\n            {props.users.map((item, index)=>{\n               return <SingleUser user = {item} key={index}/>\n            })}\n        </tbody>\n      </table>\n    </div>\n  </div>;\n}","import Axios from 'axios';\nimport React from 'react';\nimport { Component, Fragment } from \"react\";\nimport UserBox from '../components/Users/UserBox';\nimport UsersTable from '../components/Users/UsersTable';\n\n\nclass HomeContainer extends Component {\n\n    state = {\n        usersCount: 0,\n        postsCount: 0,\n        users: [],\n        posts: []\n\n    }\n\n    componentDidMount() {\n       this.getAllUsers();\n       // this.getAllPosts();\n    }\n\n    getAllUsers = () => {\n        Axios.get(\"http://13.232.164.94:7001/studiendo/users/getAllUsers\").then(res => {\n            console.log(res.data.data)\n            this.setState({ usersCount: res.data.data.length, users: res.data.data })\n        }).catch(err => {\n            console.error(err)\n        })\n    }\n\n    getAllPosts = () => {\n        Axios.get(\"http://13.232.164.94:7001/studiendo/discussionBoard/getAllPosts\").then(res => {\n            this.setState({ postsCount: res.data.data.length, posts: res.data.data })\n        }).catch(err => {\n            console.error(err)\n        })\n    }\n\n\n    render() {\n        return (<Fragment>\n            <div className=\"row\">\n                <div className=\"col-md-4 offset-md-4\">\n                <UserBox count={this.state.usersCount} />\n                </div>\n            </div>\n            <br/>\n            \n            <UsersTable users = {this.state.users}/>\n\n        </Fragment>)\n    }\n}\n\nexport default HomeContainer;","import React from 'react';\nimport './App.css';\nimport { Switch, Route, BrowserRouter } from 'react-router-dom';\nimport HomeContainer from './containers/Home'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  \n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path=\"/\" component={HomeContainer} />\n        <Route exact path=\"/cart\" />\n        <Route exact path=\"/register\"  />\n      </Switch>\n  </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}